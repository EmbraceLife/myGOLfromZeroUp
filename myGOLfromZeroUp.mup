{
  "title": "Game Of Life",
  "id": 1,
  "formatVersion": 2,
  "ideas": {
    "1": {
      "title": "1. skeleton",
      "id": 2,
      "ideas": {
        "1": {
          "title": "global variable",
          "id": 3,
          "ideas": {
            "1": {
              "title": "boolean",
              "id": 42,
              "ideas": {
                "2": {
                  "title": "debugAllToggle",
                  "id": 44,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "3": {
                  "title": "watcherToggle",
                  "id": 45,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            },
            "2": {
              "title": "Cell",
              "id": 46,
              "ideas": {
                "1": {
                  "title": "cell1, cell2",
                  "id": 47,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            },
            "3": {
              "title": "Cell[][]",
              "id": 86,
              "ideas": {
                "1": {
                  "title": "board1",
                  "id": 87,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "transparent"
            }
          }
        },
        "2": {
          "title": "void setup()",
          "id": 5,
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "we can set println() debug at setup()"
            },
            "style": {
              "background": "transparent"
            }
          },
          "ideas": {
            "1": {
              "title": "debug initials",
              "id": 48,
              "ideas": {
                "1": {
                  "title": "debugAllToggle = true",
                  "id": 49,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "2": {
                  "title": "watcherToggle = false",
                  "id": 50,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            },
            "2": {
              "title": "canvas",
              "id": 53,
              "ideas": {
                "1": {
                  "title": "size(600,600)",
                  "id": 56,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "2": {
                  "title": "background(0)",
                  "id": 57,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "3": {
                  "title": "simpleCheck()",
                  "id": 60,
                  "ideas": {},
                  "attr": {
                    "style": {
                      "background": "transparent"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "simpleCheck(\"create canvas 600:600\");"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            },
            "3": {
              "title": "cell1,cell2",
              "id": 58,
              "ideas": {
                "1": {
                  "title": "= new Cell(x,y,w)",
                  "id": 59,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "cell1 = new Cell(int(random(width-10)), int(random(height-10)), 10);<div><div>cell2 = new Cell(int(random(width-10)), int(random(height-10)), 10);</div></div><div><br></div><div>make sure cell1 will be within canvas</div>"
                    },
                    "style": {
                      "background": "transparent"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            },
            "4": {
              "title": "board1",
              "id": 88,
              "ideas": {
                "1": {
                  "title": "= new Cell[10][10]",
                  "id": 89,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "2": {
                  "title": "board1[i][j] = new Cell(x,y,w)",
                  "id": 90,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>&nbsp; for (int i = 0; i &lt; 10; i++) {</div><div>&nbsp; &nbsp; &nbsp;for (int j = 0; j &lt; 10; j++) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; board1[i][j] = new Cell(200+i*cell1.wCell, 200+j*cell1.wCell, cell1.wCell);&nbsp;</div><div>&nbsp; &nbsp; &nbsp;}</div><div>&nbsp; }</div><div><br></div><div>make sure to draw board1 starting from (200, 200)</div>"
                    }
                  }
                },
                "3": {
                  "title": "board[i][j] .display()",
                  "id": 91,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            }
          }
        },
        "3": {
          "title": "void draw()",
          "id": 6,
          "ideas": {
            "1": {
              "title": "cells",
              "id": 64,
              "ideas": {
                "1": {
                  "title": "cell1.display()",
                  "id": 63,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "2": {
                  "title": "debug cell1 and cell2",
                  "id": 65,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>simpleCheck(\"cell1 is displayed\");<br></div><div>check2Values(\"cell1-x:y\", cell1.xCell, cell1.yCell);</div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>check2Values(\"cell1-deadColor:lifeColor\", cell1.deathColor, cell1.lifeColor);</div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>check2Values(\"cell1-now:previous\", cell1.now, cell1.previous);</div></blockquote><div>&nbsp;&nbsp;</div>"
                    },
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "3": {
                  "title": "noLoop()",
                  "id": 72,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "noLoop()&nbsp;<div><br></div><div>-- no more draw() or continuously drawing;</div><div>-- it can be placed at the end of setup() or inside draw();</div>"
                    }
                  }
                },
                "1.5": {
                  "title": "cell2.display()",
                  "id": 70,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "transparent"
            }
          }
        },
        "4": {
          "title": "void keyPressed() ",
          "id": 7,
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "we can press key to toggle specific debug like watching specific points of the programs"
            },
            "style": {
              "background": "transparent"
            }
          },
          "ideas": {
            "1": {
              "title": "toggles",
              "id": 66,
              "ideas": {
                "1": {
                  "title": "debugAllControl()",
                  "id": 67,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>&nbsp; if (key == 'd') {</div><div>&nbsp; &nbsp; &nbsp;debugAllToggle = !debugAllToggle;&nbsp;</div><div>&nbsp; }</div><div>&nbsp;&nbsp;</div><div><br></div><div><br></div><div>create toggles to turn debug on and off</div>"
                    },
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "2": {
                  "title": "watcherControl()",
                  "id": 68,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>&nbsp; if (key == 'w') {</div><div>&nbsp; &nbsp; &nbsp;watcherToggle = !watcherToggle;</div><div>&nbsp; }</div><div><br></div><div>turn watcher on and off</div>"
                    },
                    "style": {
                      "background": "transparent"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            },
            "2": {
              "title": "Looping",
              "id": 74,
              "ideas": {
                "1": {
                  "title": "drawAnotherFrame()",
                  "id": 75,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void drawAnotherFrame() {</div><div>&nbsp; &nbsp;if (key == 'n') {</div><div>&nbsp; &nbsp; &nbsp; redraw();</div><div>&nbsp; &nbsp;}</div><div>}</div>"
                    },
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "2": {
                  "title": "drawContinue()",
                  "id": 76,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void drawContinue() {</div><div>&nbsp; if (key == ' ') {</div><div>&nbsp; &nbsp; loop();&nbsp;</div><div>&nbsp; }</div><div>}</div>"
                    },
                    "style": {
                      "background": "transparent"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            }
          }
        },
        "5": {
          "title": "functions",
          "id": 80,
          "ideas": {
            "1": {
              "title": "debug",
              "id": 8,
              "attr": {
                "style": {
                  "background": "transparent"
                }
              },
              "ideas": {
                "1": {
                  "title": "simpleCheck()",
                  "id": 77,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void simpleCheck(String words) {</div><div>&nbsp; if (debugAllToggle) {</div><div>&nbsp; &nbsp; &nbsp;print(\"frame\", frameCount, \"-&gt; \");</div><div>&nbsp; &nbsp; &nbsp;println(words);&nbsp;</div><div>&nbsp; }</div><div>}</div>"
                    }
                  }
                },
                "2": {
                  "title": "checkValue()",
                  "id": 78,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void checkValue(String words, int value) {</div><div>&nbsp; if (debugAllToggle) {</div><div>&nbsp; &nbsp;print(\"frame\", frameCount, \"-&gt; \");</div><div>&nbsp; &nbsp;print(words, \"-&gt; \");</div><div>&nbsp; &nbsp;println(value);</div><div>&nbsp; }</div><div>}</div>"
                    }
                  }
                },
                "3": {
                  "title": "check2Values()",
                  "id": 79,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void check2Values(String words, int value1, int value2) {</div><div>&nbsp; if (debugAllToggle) {</div><div>&nbsp; &nbsp;print(\"frame\", frameCount, \"-&gt; \");</div><div>&nbsp; &nbsp;print(words, \"-&gt; \");</div><div>&nbsp; &nbsp;println(value1, \":\", value2);</div><div>&nbsp; }</div><div>}</div>"
                    }
                  }
                },
                "4": {
                  "title": "drawAnotherFrame()",
                  "id": 84,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void drawAnotherFrame() {</div><div>&nbsp; &nbsp;if (key == 'n') {</div><div>&nbsp; &nbsp; &nbsp; redraw();</div><div>&nbsp; &nbsp;}</div><div>}</div>"
                    }
                  }
                },
                "5": {
                  "title": "drawContinue()",
                  "id": 85,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void drawContinue() {</div><div>&nbsp; if (key == ' ') {</div><div>&nbsp; &nbsp; loop();&nbsp;</div><div>&nbsp; }</div><div>}</div>"
                    }
                  }
                }
              }
            },
            "2": {
              "title": "toggles",
              "id": 81,
              "ideas": {
                "1": {
                  "title": "debugAllControl()",
                  "id": 82,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void debugAllControl() {</div><div>&nbsp; &nbsp;if (key == 'd') {</div><div>&nbsp; &nbsp; &nbsp; debugAllToggle = !debugAllToggle;&nbsp;</div><div>&nbsp; &nbsp;}</div><div>}</div>"
                    }
                  }
                },
                "2": {
                  "title": "watcherControl()",
                  "id": 83,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void watcherControl() {</div><div>&nbsp; if (key == 'w') {</div><div>&nbsp; &nbsp; &nbsp;watcherToggle = !watcherToggle;</div><div>&nbsp; }</div><div>}</div>"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            },
            "3": {
              "title": "board",
              "id": 92,
              "ideas": {
                "1": {
                  "title": "createBoard",
                  "id": 93,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void createBoard(int colBoard, int rowBoard, int wCell, Cell[][] board) {</div><div>&nbsp; &nbsp; for (int i = 0; i &lt; colBoard; i++) {</div><div>&nbsp; &nbsp; &nbsp;for (int j = 0; j &lt; rowBoard; j++) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;board[i][j] = new Cell(i*wCell, j*wCell, wCell);</div><div>&nbsp; &nbsp; &nbsp;}</div><div>&nbsp; &nbsp; }</div><div>}</div>"
                    }
                  }
                },
                "2": {
                  "title": "displayBoard",
                  "id": 94,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void displayBoard(int colBoard, int rowBoard, Cell[][] board) {</div><div>&nbsp; &nbsp; for (int i = 0; i &lt; colBoard; i++) {</div><div>&nbsp; &nbsp; &nbsp;for (int j = 0; j &lt; rowBoard; j++) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;board[i][j].display();</div><div>&nbsp; &nbsp; &nbsp;}</div><div>&nbsp; &nbsp; }</div><div>}&nbsp;</div>"
                    }
                  }
                },
                "3": {
                  "title": "? boardStatus()",
                  "id": 95,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "2.5": {
                  "title": "randomizeBoard()",
                  "id": 97,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void randomizeBoard(int colBoard, int rowBoard, Cell[][] board) {</div><div>&nbsp; &nbsp; for (int i = 0; i &lt; colBoard; i++) {</div><div>&nbsp; &nbsp; &nbsp;for (int j = 0; j &lt; rowBoard; j++) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;board[i][j].randomizeState();</div><div>&nbsp; &nbsp; &nbsp;}</div><div>&nbsp; &nbsp; }</div><div>}&nbsp;</div><div><br></div><div>1. now let's add randomizeBoardToggle to the function above</div>"
                    },
                    "style": {
                      "background": "transparent"
                    }
                  },
                  "ideas": {}
                },
                "2.75": {
                  "title": "evolveBoard()",
                  "id": 98,
                  "attr": {
                    "style": {
                      "background": "#90EE90"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div><font size=\"3\">void evolveBoard(int colsBoard, int rowsBoard, Cell[][] board) {</font></div><div><font size=\"3\">&nbsp;&nbsp;</font></div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; // loop through every cell</font></div><div><font size=\"3\">&nbsp;for (int i = 0; i &lt; colsBoard; i++) {</font></div><div><font size=\"3\">&nbsp; &nbsp; for (int j = 0; j &lt; rowsBoard; j++) {</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; board[i][j].previous = board[i][j].now;</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; int aliveNeighbours = 0;</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp;&nbsp;</font></div><div><span style=\"font-size: medium;\"><br></span></div><div><span style=\"font-size: medium;\">&nbsp; &nbsp; &nbsp; // loop through every cell's neighbour including itself</span></div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; for (int x = -1; x &lt;= 1; x++) { // note x&lt;=1, y&lt;=1</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; &nbsp; for (int y = -1; y &lt;=1; y++) {</font></div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (board[(i+x+colsBoard)%colsBoard][(j+y+rowsBoard)%rowsBoard].now == 1) { //note: i+x+colsBoard</font></div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;aliveNeighbours++;&nbsp;</font></div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</font></div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; &nbsp; }</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; }</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp;</font></div><div><font size=\"3\">&nbsp; &nbsp; &nbsp; // minus itself</font></div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; aliveNeighbours = aliveNeighbours - board[i][j].now;</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp;&nbsp;</font></div><div><font size=\"3\">&nbsp; &nbsp; &nbsp; // rules</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; if (board[i][j].previous == 1) {</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (aliveNeighbours &lt; 2 || aliveNeighbours &gt; 3) {</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; board[i][j].now = 0;&nbsp;</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;} // otherwise, no change to its state</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; } else {</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if (aliveNeighbours == 3) {</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; board[i][j].now = 1;&nbsp;</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; }</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp;&nbsp;</font></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; &nbsp; board[i][j].previous = board[i][j].now;</font></div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font size=\"3\">&nbsp; &nbsp; }</font></div><div><font size=\"3\">&nbsp;}</font></div></blockquote><div><font size=\"3\">}</font></div><div><font size=\"3\"><br></font></div><div><font size=\"3\" face=\"Arial Black\"><br></font></div><div><font size=\"3\" face=\"Arial Black\">This function does not produce the correct evolution I did in previous version of Game of Life</font></div>"
                    }
                  },
                  "ideas": {
                    "1": {
                      "title": "simplify some rules to see it working or not",
                      "id": 101,
                      "attr": {
                        "style": {
                          "background": "#90EE90"
                        }
                      }
                    },
                    "2": {
                      "title": "simplified 1",
                      "id": 102,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "1. loop through every cell<div>1.1 count number of alive neighbours&nbsp;</div><div>1.2 print out their nums for each cell</div><div>1.3 make the alive cell with three alive neighbours, dark red</div><div>1.4 make the dead cell with three alive neighbours, pink</div><div>1.5</div><div><br></div><div>void evolveBoard1(int colsBoard, int rowsBoard, Cell[][] board) {<br></div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>for (int i = 0; i &lt; colsBoard; i++) {</div><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>for (int j = 0; j &lt; rowsBoard; j++) {</div></blockquote></div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>int aliveNeighbours = 0;</div></blockquote></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><br></div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>for ( int x = -1; x &lt;=1; x++) &nbsp;{</div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>for (int y = -1; y &lt;= 1; y++ ) {</div></blockquote></div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>aliveNeighbours += board[(i+x+colsBoard)%colsBoard][(j+y+rowsBoard)%rowsBoard].now;</div></blockquote></div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><br></div></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div></blockquote></div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div></blockquote></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>aliveNeighbours -= board[i][j].now;</div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>println(\"cell\", i, \":\", j, \"-&gt; \", aliveNeighbours);</div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><br></div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>if (aliveNeighbours == 3 &amp;&amp; board[i][j].now == 0) {</div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>stroke(50);</div></blockquote></div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>fill(pink);</div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>rect(i*wCell, j*wCell, wCell, wCell);</div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">else if (aliveNeighbours ==3 &amp;&amp; board[i][j].now ==1) {</blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>stroke(50);</div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>fill(dark red);</div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>rect(i*wCell, j*wCell, wCell, wCell); }</div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><br></div></blockquote></div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div></blockquote></div></blockquote><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">}</blockquote></div><div>}</div></blockquote>}"
                        },
                        "style": {
                          "background": "#90EE90"
                        }
                      },
                      "ideas": {
                        "1": {
                          "title": "This is working",
                          "id": 103,
                          "attr": {
                            "style": {
                              "background": "#FFA07A"
                            }
                          }
                        }
                      }
                    },
                    "3": {
                      "title": "go further 2",
                      "id": 104,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "1. loop through every cell<div>1.1 count number of alive neighbours&nbsp;</div><div>1.2 print out their nums for each cell</div><div>1.3 for the alive cell with two or three alive neighbours, give it &nbsp;dark red id</div><div>1.4 for the dead cell with three alive neighbours, give it pink id</div><div>1.5 for the alive cell with &lt;2 or &gt;3 alive neighbours, give it grey id</div><div>1.6 for the dead cell without == 3 alive neighbours, give it dark black id</div><div><br></div><div>void evolveBoard2(int colsBoard, int rowsBoard, Cell[][] board) {<br></div><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><div>for (int i = 0; i &lt; colsBoard; i++) {</div><div><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">for (int j = 0; j &lt; rowsBoard; j++) {</blockquote></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><div><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">board[i][j].previous = board[i][j].now;</blockquote></div></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">int aliveNeighbours = 0;</blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><br></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">for ( int x = -1; x &lt;=1; x++) &nbsp;{</blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">for (int y = -1; y &lt;= 1; y++ ) {</blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">aliveNeighbours += board[(i+x+colsBoard)%colsBoard][(j+y+rowsBoard)%rowsBoard].now;</blockquote></blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><br></blockquote></blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">}</blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">}</blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">aliveNeighbours -= board[i][j].now;</blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">println(\"cell\", i, \":\", j, \"-&gt; \", aliveNeighbours);</blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><br></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">if ( (aliveNeighbours == 3 || aliveNeighbours ==2 ) &amp;&amp; board[i][j].previous == 1) {</blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">board[i][j].now = 1; }</blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">else if ( (aliveNeighbours &gt; 3 || aliveNeighbours &lt; 2) &amp;&amp; board[i][j].previous == 1) {</blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">board[i][j].now = 0; }</blockquote>else if ( aliveNeighbours == 3 &amp;&amp; board[i][j].previous == 0 ) {</blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">board[i][j].now = 1}</blockquote>else if ( aliveNeighbours != 3 &amp;&amp; board[i][j].previous == 0) {</blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">board[i][j].now = 0}</blockquote></blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><br></blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">}</blockquote></blockquote><div><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">}</blockquote></div><div>}</div></blockquote>}"
                        },
                        "style": {
                          "background": "#F08080"
                        }
                      }
                    },
                    "4": {
                      "title": "logic mistake -- how to debug",
                      "id": 106,
                      "attr": {
                        "style": {
                          "background": "#008B8B"
                        },
                        "attachment": {
                          "contentType": "text/html",
                          "content": "<div><div><b>If you use the first 5 lines to be replaced by the later 3 lines, and if you think it is cleaner code, then you are making a huge logical error</b></div><div><b><br></b></div><div><b><br></b></div><ol><li>for ( int i = 0; i &lt; colsBoard; i++) {<br></li><li>&nbsp; &nbsp;for ( int j = 0; j &lt; rowsBoard; j++) {<br></li><li>&nbsp; &nbsp; &nbsp;board[i][j].previous = board[i][j].now;<br></li><li>&nbsp; &nbsp;}<br></li><li>&nbsp; }<br></li></ol></div><div>&nbsp;&nbsp;</div><div><ol><li>&nbsp; for (int i = 0; i &lt; colsBoard; i++) {<br></li><li>&nbsp; &nbsp; for (int j = 0; j &lt; rowsBoard; j++) {<br></li><li>&nbsp; &nbsp; &nbsp; //board[i][j].previous = board[i][j].now;<br></li></ol></div><div>&nbsp; &nbsp; &nbsp; int aliveNeighbours = 0;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; for ( int x = -1; x &lt;=1; x++) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for (int y = -1; y &lt;= 1; y++ ) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; aliveNeighbours += board[(i+x+colsBoard)%colsBoard][(j+y+rowsBoard)%rowsBoard].previous;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; aliveNeighbours -= board[i][j].previous;</div><div>&nbsp; &nbsp; &nbsp; //println(\"cell\", i, \":\", j, \"-&gt; \", aliveNeighbours);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; if ( (aliveNeighbours == 3 || aliveNeighbours == 2 ) &amp;&amp; board[i][j].previous == 1) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; board[i][j].now = 1;</div><div>&nbsp; &nbsp; &nbsp; } else if ( (aliveNeighbours &gt; 3 || aliveNeighbours &lt; 2) &amp;&amp; board[i][j].previous == 1) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; board[i][j].now = 0;</div><div>&nbsp; &nbsp; &nbsp; } else if ( aliveNeighbours == 3 &amp;&amp; board[i][j].previous == 0 ) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; board[i][j].now = 1;</div><div>&nbsp; &nbsp; &nbsp; } else if ( aliveNeighbours != 3 &amp;&amp; board[i][j].previous == 0) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; board[i][j].now = 0;</div><div>&nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>&nbsp; }</div><div>}</div><div><ol><li><br></li></ol></div>"
                        }
                      }
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "transparent"
            }
          }
        }
      },
      "attr": {
        "style": {
          "background": "transparent"
        }
      }
    },
    "11": {
      "title": "2. Cell",
      "id": 9,
      "attr": {
        "attachment": {
          "contentType": "text/html",
          "content": "Cell -- essential unit of Game of Life, and board of canvas<div><br></div><div>Cell -- has all the AI DNA</div>"
        },
        "style": {
          "background": "transparent"
        }
      },
      "ideas": {
        "1": {
          "title": "fields",
          "id": 10,
          "ideas": {
            "1": {
              "title": "shape",
              "id": 13,
              "ideas": {
                "1": {
                  "title": "xCell",
                  "id": 14,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "2": {
                  "title": "yCell",
                  "id": 15,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "3": {
                  "title": "wCell",
                  "id": 16,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            },
            "2": {
              "title": "color",
              "id": 18,
              "ideas": {
                "1": {
                  "title": "lifeColor",
                  "id": 19,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "2": {
                  "title": "deathColor",
                  "id": 20,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            },
            "3": {
              "title": "state",
              "id": 21,
              "ideas": {
                "1": {
                  "title": "now",
                  "id": 22,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "2": {
                  "title": "previous",
                  "id": 23,
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                }
              },
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "state --<div><br></div><div>1. colour is specified by value or number differences</div><div>2. state is to use number to differentiate colours for cells</div>"
                },
                "style": {
                  "background": "transparent"
                }
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {
              "background": "transparent"
            }
          }
        },
        "2": {
          "title": "methods",
          "id": 11,
          "ideas": {
            "1": {
              "title": "display()",
              "id": 35,
              "ideas": {
                "1": {
                  "title": "this is done",
                  "id": 105,
                  "attr": {
                    "style": {
                      "background": "#FFA07A"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#90EE90"
                },
                "attachment": {
                  "contentType": "text/html",
                  "content": "<div><b><font face=\"Arial Black\">Let's give cells four different colours</font></b></div><div><b><font face=\"Arial Black\"><br></font></b></div><div>&nbsp;void display() {</div><div>&nbsp; &nbsp; &nbsp;</div><div>&nbsp; &nbsp; stroke(50);</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; if (now == 1 &amp;&amp; previous == 1) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp;fill(dark red);&nbsp;</div><div>&nbsp; &nbsp; } else if (previous == 1 &amp;&amp; now == 0 ) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp;fill(grey );&nbsp;</div><div>&nbsp; &nbsp; } else if (previous == 0 &amp;&amp; now == 1) {</div><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>fill( yellow-pink);</div></blockquote>&nbsp; &nbsp; }else if (previous == 0 &amp;&amp; now == 0) {<br></div><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>fill( dark black); }</div></blockquote></div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; rect(xCell, yCell, wCell, wCell);</div><div>&nbsp; }</div>"
                }
              }
            },
            "2": {
              "title": "randomizeState()",
              "id": 36,
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "transparent"
            }
          }
        },
        "1.5": {
          "title": "constructor",
          "id": 12,
          "ideas": {
            "1": {
              "title": "Cell(x, y, w)",
              "id": 24,
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "Cell(x, y, w) --<div><br></div><div>1. whenever instantiate a cell object, we give it a specified xCell, yCell and wCell</div><div>2. because, cells are everywhere in canvas, we need specifics to manipulate them</div>"
                },
                "style": {
                  "background": "transparent"
                }
              },
              "ideas": {
                "1": {
                  "title": " x, y, w",
                  "id": 26,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "x, y, w --<div><br></div><div>1. differentiate one cell from the other when instantiating cells</div><div><br></div><div>2. values of other fields are shared by all cells at instantiation</div><div><br></div><div>3. other fields may change values of other fields during evolution</div>"
                    },
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "2": {
                  "title": "now",
                  "id": 27,
                  "ideas": {
                    "1": {
                      "title": "int(random(100) < 15",
                      "id": 41,
                      "attr": {
                        "style": {
                          "background": "transparent"
                        }
                      }
                    }
                  },
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div><div>&nbsp; &nbsp;if (int(random(100)) &lt; 15) {</div><div>&nbsp; &nbsp; &nbsp;now = 1;</div><div>&nbsp; &nbsp;} else {</div><div>&nbsp; &nbsp; &nbsp;now = 0;&nbsp;</div><div>&nbsp; &nbsp;}</div></div><div><br></div><div>make sure only 15% change to have an alive cell</div>"
                    },
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "3": {
                  "title": "previous",
                  "id": 28,
                  "ideas": {
                    "1": {
                      "title": "= now;",
                      "id": 30,
                      "attr": {
                        "style": {
                          "background": "transparent"
                        }
                      }
                    }
                  },
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "1.5": {
                  "title": "lifeColor",
                  "id": 31,
                  "ideas": {
                    "1": {
                      "title": "= color selector value",
                      "id": 32,
                      "attr": {
                        "style": {
                          "background": "transparent"
                        }
                      }
                    }
                  },
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                },
                "1.75": {
                  "title": "deadthColor",
                  "id": 33,
                  "ideas": {
                    "1": {
                      "title": "=color selector value",
                      "id": 34,
                      "attr": {
                        "style": {
                          "background": "transparent"
                        }
                      }
                    }
                  },
                  "attr": {
                    "style": {
                      "background": "transparent"
                    }
                  }
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "transparent"
            },
            "collapsed": true
          }
        }
      }
    }
  },
  "links": [],
  "attr": {
    "storyboards": [
      "Storyboard 1"
    ],
    "style": {
      "background": "transparent"
    }
  }
}