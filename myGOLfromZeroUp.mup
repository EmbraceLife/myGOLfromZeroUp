{
  "title": "Game Of Life",
  "id": 1,
  "formatVersion": 2,
  "ideas": {
    "1": {
      "title": "1. skeleton",
      "id": 2,
      "ideas": {
        "1": {
          "title": "global variable",
          "id": 3,
          "ideas": {
            "1": {
              "title": "boolean",
              "id": 42,
              "ideas": {
                "2": {
                  "title": "debugAllToggle",
                  "id": 44,
                  "attr": {
                    "style": {
                      "background": "#ff99cc"
                    }
                  }
                },
                "3": {
                  "title": "watcherToggle",
                  "id": 45,
                  "attr": {
                    "style": {
                      "background": "#ff99cc"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            },
            "2": {
              "title": "Cell",
              "id": 46,
              "ideas": {
                "1": {
                  "title": "cell1, cell2",
                  "id": 47,
                  "attr": {
                    "style": {}
                  }
                }
              },
              "attr": {
                "style": {}
              }
            }
          },
          "attr": {
            "style": {}
          }
        },
        "2": {
          "title": "void setup()",
          "id": 5,
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "we can set println() debug at setup()"
            },
            "style": {}
          },
          "ideas": {
            "1": {
              "title": "debug initials",
              "id": 48,
              "ideas": {
                "1": {
                  "title": "debugAllToggle = true",
                  "id": 49,
                  "attr": {
                    "style": {
                      "background": "#ff99cc"
                    }
                  }
                },
                "2": {
                  "title": "watcherToggle = false",
                  "id": 50,
                  "attr": {
                    "style": {
                      "background": "#ff99cc"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "transparent"
                }
              }
            },
            "2": {
              "title": "canvas",
              "id": 53,
              "ideas": {
                "1": {
                  "title": "size(600,600)",
                  "id": 56,
                  "attr": {
                    "style": {}
                  }
                },
                "2": {
                  "title": "background(0)",
                  "id": 57,
                  "attr": {
                    "style": {}
                  }
                },
                "3": {
                  "title": "simpleCheck()",
                  "id": 60,
                  "ideas": {},
                  "attr": {
                    "style": {
                      "background": "#ff99cc"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "simpleCheck(\"create canvas 600:600\");"
                    }
                  }
                }
              },
              "attr": {
                "style": {}
              }
            },
            "3": {
              "title": "cell1,cell2",
              "id": 58,
              "ideas": {
                "1": {
                  "title": "instantiation",
                  "id": 59,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "cell1 = new Cell(int(random(width-10)), int(random(height-10)), 10);<div><div>cell2 = new Cell(int(random(width-10)), int(random(height-10)), 10);</div></div><div><br></div><div>make sure cell1 will be within canvas</div>"
                    },
                    "style": {
                      "background": "transparent"
                    }
                  }
                }
              },
              "attr": {
                "style": {}
              }
            }
          }
        },
        "3": {
          "title": "void draw()",
          "id": 6,
          "ideas": {
            "1": {
              "title": "cells",
              "id": 64,
              "ideas": {
                "1": {
                  "title": "cell1.display()",
                  "id": 63,
                  "attr": {
                    "style": {}
                  }
                },
                "2": {
                  "title": "debug cell1 and cell2",
                  "id": 65,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>simpleCheck(\"cell1 is displayed\");<br></div><div>check2Values(\"cell1-x:y\", cell1.xCell, cell1.yCell);</div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>check2Values(\"cell1-deadColor:lifeColor\", cell1.deathColor, cell1.lifeColor);</div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>check2Values(\"cell1-now:previous\", cell1.now, cell1.previous);</div></blockquote><div>&nbsp;&nbsp;</div>"
                    },
                    "style": {
                      "background": "#FFB6C1"
                    }
                  }
                },
                "3": {
                  "title": "noLoop()",
                  "id": 72,
                  "attr": {
                    "style": {
                      "background": "#F08080"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "noLoop()&nbsp;<div><br></div><div>-- no more draw() or continuously drawing;</div><div>-- it can be placed at the end of setup() or inside draw();</div>"
                    }
                  }
                },
                "1.5": {
                  "title": "cell2.display()",
                  "id": 70,
                  "attr": {
                    "style": {}
                  }
                }
              },
              "attr": {
                "style": {}
              }
            }
          },
          "attr": {
            "style": {}
          }
        },
        "4": {
          "title": "void keyPressed() ",
          "id": 7,
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "we can press key to toggle specific debug like watching specific points of the programs"
            },
            "style": {}
          },
          "ideas": {
            "1": {
              "title": "toggles",
              "id": 66,
              "ideas": {
                "1": {
                  "title": "debugAllControl()",
                  "id": 67,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>&nbsp; if (key == 'd') {</div><div>&nbsp; &nbsp; &nbsp;debugAllToggle = !debugAllToggle;&nbsp;</div><div>&nbsp; }</div><div>&nbsp;&nbsp;</div><div><br></div><div><br></div><div>create toggles to turn debug on and off</div>"
                    },
                    "style": {}
                  }
                },
                "2": {
                  "title": "watcherControl()",
                  "id": 68,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>&nbsp; if (key == 'w') {</div><div>&nbsp; &nbsp; &nbsp;watcherToggle = !watcherToggle;</div><div>&nbsp; }</div><div><br></div><div>turn watcher on and off</div>"
                    },
                    "style": {}
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#F08080"
                }
              }
            },
            "2": {
              "title": "Looping",
              "id": 74,
              "ideas": {
                "1": {
                  "title": "drawAnotherFrame()",
                  "id": 75,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void drawAnotherFrame() {</div><div>&nbsp; &nbsp;if (key == 'n') {</div><div>&nbsp; &nbsp; &nbsp; redraw();</div><div>&nbsp; &nbsp;}</div><div>}</div>"
                    },
                    "style": {
                      "background": "#F08080"
                    }
                  }
                },
                "2": {
                  "title": "drawContinue()",
                  "id": 76,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void drawContinue() {</div><div>&nbsp; if (key == ' ') {</div><div>&nbsp; &nbsp; loop();&nbsp;</div><div>&nbsp; }</div><div>}</div>"
                    },
                    "style": {
                      "background": "#F08080"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#F08080"
                }
              }
            }
          }
        },
        "5": {
          "title": "functions",
          "id": 80,
          "ideas": {
            "1": {
              "title": "debug",
              "id": 8,
              "attr": {
                "style": {
                  "background": "#F08080"
                }
              },
              "ideas": {
                "1": {
                  "title": "simpleCheck()",
                  "id": 77,
                  "attr": {
                    "style": {
                      "background": "#F08080"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void simpleCheck(String words) {</div><div>&nbsp; if (debugAllToggle) {</div><div>&nbsp; &nbsp; &nbsp;print(\"frame\", frameCount, \"-&gt; \");</div><div>&nbsp; &nbsp; &nbsp;println(words);&nbsp;</div><div>&nbsp; }</div><div>}</div>"
                    }
                  }
                },
                "2": {
                  "title": "checkValue()",
                  "id": 78,
                  "attr": {
                    "style": {
                      "background": "#F08080"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void checkValue(String words, int value) {</div><div>&nbsp; if (debugAllToggle) {</div><div>&nbsp; &nbsp;print(\"frame\", frameCount, \"-&gt; \");</div><div>&nbsp; &nbsp;print(words, \"-&gt; \");</div><div>&nbsp; &nbsp;println(value);</div><div>&nbsp; }</div><div>}</div>"
                    }
                  }
                },
                "3": {
                  "title": "check2Values()",
                  "id": 79,
                  "attr": {
                    "style": {
                      "background": "#F08080"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void check2Values(String words, int value1, int value2) {</div><div>&nbsp; if (debugAllToggle) {</div><div>&nbsp; &nbsp;print(\"frame\", frameCount, \"-&gt; \");</div><div>&nbsp; &nbsp;print(words, \"-&gt; \");</div><div>&nbsp; &nbsp;println(value1, \":\", value2);</div><div>&nbsp; }</div><div>}</div>"
                    }
                  }
                },
                "4": {
                  "title": "drawAnotherFrame()",
                  "id": 84,
                  "attr": {
                    "style": {
                      "background": "#F08080"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void drawAnotherFrame() {</div><div>&nbsp; &nbsp;if (key == 'n') {</div><div>&nbsp; &nbsp; &nbsp; redraw();</div><div>&nbsp; &nbsp;}</div><div>}</div>"
                    }
                  }
                },
                "5": {
                  "title": "drawContinue()",
                  "id": 85,
                  "attr": {
                    "style": {
                      "background": "#F08080"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void drawContinue() {</div><div>&nbsp; if (key == ' ') {</div><div>&nbsp; &nbsp; loop();&nbsp;</div><div>&nbsp; }</div><div>}</div>"
                    }
                  }
                }
              }
            },
            "2": {
              "title": "toggles",
              "id": 81,
              "ideas": {
                "1": {
                  "title": "debugAllControl()",
                  "id": 82,
                  "attr": {
                    "style": {
                      "background": "#F08080"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void debugAllControl() {</div><div>&nbsp; &nbsp;if (key == 'd') {</div><div>&nbsp; &nbsp; &nbsp; debugAllToggle = !debugAllToggle;&nbsp;</div><div>&nbsp; &nbsp;}</div><div>}</div>"
                    }
                  }
                },
                "2": {
                  "title": "watcherControl()",
                  "id": 83,
                  "attr": {
                    "style": {
                      "background": "#F08080"
                    },
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>void watcherControl() {</div><div>&nbsp; if (key == 'w') {</div><div>&nbsp; &nbsp; &nbsp;watcherToggle = !watcherToggle;</div><div>&nbsp; }</div><div>}</div>"
                    }
                  }
                }
              },
              "attr": {
                "style": {
                  "background": "#F08080"
                }
              }
            }
          },
          "attr": {
            "style": {
              "background": "#ADD8E6"
            }
          }
        }
      },
      "attr": {
        "style": {}
      }
    },
    "11": {
      "title": "2. Cell",
      "id": 9,
      "attr": {
        "attachment": {
          "contentType": "text/html",
          "content": "Cell -- essential unit of Game of Life, and board of canvas<div><br></div><div>Cell -- has all the AI DNA</div>"
        },
        "style": {}
      },
      "ideas": {
        "1": {
          "title": "fields",
          "id": 10,
          "ideas": {
            "1": {
              "title": "shape",
              "id": 13,
              "ideas": {
                "1": {
                  "title": "xCell",
                  "id": 14
                },
                "2": {
                  "title": "yCell",
                  "id": 15
                },
                "3": {
                  "title": "wCell",
                  "id": 16
                }
              }
            },
            "2": {
              "title": "color",
              "id": 18,
              "ideas": {
                "1": {
                  "title": "lifeColor",
                  "id": 19
                },
                "2": {
                  "title": "deathColor",
                  "id": 20
                }
              }
            },
            "3": {
              "title": "state",
              "id": 21,
              "ideas": {
                "1": {
                  "title": "now",
                  "id": 22
                },
                "2": {
                  "title": "previous",
                  "id": 23
                }
              },
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "state --<div><br></div><div>1. colour is specified by value or number differences</div><div>2. state is to use number to differentiate colours for cells</div>"
                },
                "style": {}
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "2": {
          "title": "methods",
          "id": 11,
          "ideas": {
            "1": {
              "title": "display()",
              "id": 35,
              "ideas": {
                "1": {
                  "title": "stroke(50)",
                  "id": 38,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "stroke()<div><br></div><div>if totally black, then there is no line frame for each cell</div><div><br></div><div>stroke(50) to make the liner visible but not too contrast</div>"
                    },
                    "style": {}
                  }
                },
                "2": {
                  "title": "fill(deathColor/lifeColor)",
                  "id": 39,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "fill(deathColor) or fill(lifeColor) ??<div><br></div><div>if now == 1, then lifeColor; otherwise, deathColor</div>"
                    },
                    "style": {}
                  }
                },
                "3": {
                  "title": "rect() ",
                  "id": 40,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">rect(xCell, yCell, wCell, wCell)</span><div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\"><br></span></div><div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\"><br></span></div>"
                    },
                    "style": {}
                  }
                }
              },
              "attr": {
                "style": {}
              }
            },
            "2": {
              "title": "randomizeState()",
              "id": 36
            },
            "3": {
              "title": "evolveByRule()",
              "id": 37
            }
          }
        },
        "1.5": {
          "title": "constructor",
          "id": 12,
          "ideas": {
            "1": {
              "title": "Cell(x, y, w)",
              "id": 24,
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "Cell(x, y, w) --<div><br></div><div>1. whenever instantiate a cell object, we give it a specified xCell, yCell and wCell</div><div>2. because, cells are everywhere in canvas, we need specifics to manipulate them</div>"
                },
                "style": {}
              },
              "ideas": {
                "1": {
                  "title": " x, y, w",
                  "id": 26,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "x, y, w --<div><br></div><div>1. differentiate one cell from the other when instantiating cells</div><div><br></div><div>2. values of other fields are shared by all cells at instantiation</div><div><br></div><div>3. other fields may change values of other fields during evolution</div>"
                    },
                    "style": {}
                  }
                },
                "2": {
                  "title": "now",
                  "id": 27,
                  "ideas": {
                    "1": {
                      "title": "int(random(100) < 15",
                      "id": 41
                    }
                  },
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div><div>&nbsp; &nbsp;if (int(random(100)) &lt; 15) {</div><div>&nbsp; &nbsp; &nbsp;now = 1;</div><div>&nbsp; &nbsp;} else {</div><div>&nbsp; &nbsp; &nbsp;now = 0;&nbsp;</div><div>&nbsp; &nbsp;}</div></div><div><br></div><div>make sure only 15% change to have an alive cell</div>"
                    },
                    "style": {}
                  }
                },
                "3": {
                  "title": "previous",
                  "id": 28,
                  "ideas": {
                    "1": {
                      "title": "= now;",
                      "id": 30
                    }
                  }
                },
                "1.5": {
                  "title": "lifeColor",
                  "id": 31,
                  "ideas": {
                    "1": {
                      "title": "= color selector value",
                      "id": 32
                    }
                  }
                },
                "1.75": {
                  "title": "deadthColor",
                  "id": 33,
                  "ideas": {
                    "1": {
                      "title": "=color selector value",
                      "id": 34
                    }
                  }
                }
              }
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        }
      }
    }
  },
  "links": [],
  "attr": {
    "storyboards": [
      "Storyboard 1"
    ],
    "style": {}
  }
}