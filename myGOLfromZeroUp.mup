{
  "title": "Game Of Life",
  "id": 1,
  "formatVersion": 2,
  "ideas": {
    "1": {
      "title": "1. skeleton",
      "id": 2,
      "ideas": {
        "1": {
          "title": "global variable",
          "id": 3,
          "ideas": {
            "1": {
              "title": "boolean",
              "id": 42,
              "ideas": {
                "1": {
                  "title": "debugSetup",
                  "id": 43
                },
                "2": {
                  "title": "debugToggle",
                  "id": 44
                },
                "3": {
                  "title": "watcherToggle",
                  "id": 45
                }
              }
            },
            "2": {
              "title": "Cell",
              "id": 46,
              "ideas": {
                "1": {
                  "title": "cell1",
                  "id": 47
                }
              }
            }
          }
        },
        "2": {
          "title": "void setup()",
          "id": 5,
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "we can set println() debug at setup()"
            },
            "style": {}
          },
          "ideas": {
            "1": {
              "title": "debug initials",
              "id": 48,
              "ideas": {
                "1": {
                  "title": "true",
                  "id": 49
                },
                "2": {
                  "title": "false",
                  "id": 50
                },
                "3": {
                  "title": "false",
                  "id": 51
                }
              }
            },
            "2": {
              "title": "canvas",
              "id": 53,
              "ideas": {
                "1": {
                  "title": "size(600,600)",
                  "id": 56
                },
                "2": {
                  "title": "background(0)",
                  "id": 57
                },
                "3": {
                  "title": "debugSetup",
                  "id": 60,
                  "ideas": {
                    "1": {
                      "title": "only run once",
                      "id": 62
                    }
                  }
                }
              }
            },
            "3": {
              "title": "cell1",
              "id": 58,
              "ideas": {
                "1": {
                  "title": "instantiation",
                  "id": 59,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "cell1 = new Cell(int(random(width-10)), int(random(height-10)), 10);<div><br></div><div>make sure cell1 will be within canvas</div>"
                    },
                    "style": {}
                  }
                },
                "2": {
                  "title": "debugSetup",
                  "id": 61,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>&nbsp; if (debugSetup) {</div><div>&nbsp; println(\"cell1 location: \", cell1.xCell, \":\", cell1.yCell);</div><div>&nbsp; println(\"cell1 color: \", cell1.deathColor, \":\", cell1.lifeColor);</div><div>&nbsp; println(\"cell1 state: \", cell1.now, \":\", cell1.previous);</div><div>&nbsp; }</div><div><br></div><div>There is no need for toggling debugSetup, just manually set it true always.&nbsp;</div><div><br></div><div>in fact, when using it we may have to use it with noLoop()</div>"
                    },
                    "style": {}
                  }
                }
              }
            }
          }
        },
        "3": {
          "title": "void draw()",
          "id": 6,
          "ideas": {
            "1": {
              "title": "cell1",
              "id": 64,
              "ideas": {
                "1": {
                  "title": "cell1.display()",
                  "id": 63
                },
                "2": {
                  "title": "debug it",
                  "id": 65,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>&nbsp; if (debugToggle) {</div><div>&nbsp; &nbsp; &nbsp;println(\"frame: \", frameCount);</div><div>&nbsp; &nbsp; &nbsp;println(\"cell1 is displayed\");&nbsp;</div><div>&nbsp; }</div><div><br></div><div>using frameCount to tell us it is keep drawing cell1</div>"
                    },
                    "style": {}
                  }
                }
              }
            }
          }
        },
        "4": {
          "title": "void keyPressed() ",
          "id": 7,
          "attr": {
            "attachment": {
              "contentType": "text/html",
              "content": "we can press key to toggle specific debug like watching specific points of the programs"
            },
            "style": {}
          },
          "ideas": {
            "1": {
              "title": "toggles",
              "id": 66,
              "ideas": {
                "1": {
                  "title": "debugToggle()",
                  "id": 67,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>&nbsp; if (key == 'd') {</div><div>&nbsp; &nbsp; &nbsp;debugToggle = !debugToggle;&nbsp;</div><div>&nbsp; }</div><div>&nbsp;&nbsp;</div><div><br></div><div><br></div><div>create toggles to turn debug on and off</div>"
                    },
                    "style": {}
                  }
                },
                "2": {
                  "title": "watcherToggle()",
                  "id": 68,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div>&nbsp; if (key == 'w') {</div><div>&nbsp; &nbsp; &nbsp;watcherToggle = !watcherToggle;</div><div>&nbsp; }</div><div><br></div><div>turn watcher on and off</div>"
                    },
                    "style": {}
                  }
                }
              }
            }
          }
        },
        "5": {
          "title": "...",
          "id": 8
        }
      },
      "attr": {
        "style": {}
      }
    },
    "11": {
      "title": "2. Cell",
      "id": 9,
      "attr": {
        "attachment": {
          "contentType": "text/html",
          "content": "Cell -- essential unit of Game of Life, and board of canvas<div><br></div><div>Cell -- has all the AI DNA</div>"
        },
        "style": {}
      },
      "ideas": {
        "1": {
          "title": "fields",
          "id": 10,
          "ideas": {
            "1": {
              "title": "shape",
              "id": 13,
              "ideas": {
                "1": {
                  "title": "xCell",
                  "id": 14
                },
                "2": {
                  "title": "yCell",
                  "id": 15
                },
                "3": {
                  "title": "wCell",
                  "id": 16
                }
              }
            },
            "2": {
              "title": "color",
              "id": 18,
              "ideas": {
                "1": {
                  "title": "lifeColor",
                  "id": 19
                },
                "2": {
                  "title": "deathColor",
                  "id": 20
                }
              }
            },
            "3": {
              "title": "state",
              "id": 21,
              "ideas": {
                "1": {
                  "title": "now",
                  "id": 22
                },
                "2": {
                  "title": "previous",
                  "id": 23
                }
              },
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "state --<div><br></div><div>1. colour is specified by value or number differences</div><div>2. state is to use number to differentiate colours for cells</div>"
                },
                "style": {}
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "2": {
          "title": "methods",
          "id": 11,
          "ideas": {
            "1": {
              "title": "display()",
              "id": 35,
              "ideas": {
                "1": {
                  "title": "stroke(50)",
                  "id": 38,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "stroke()<div><br></div><div>if totally black, then there is no line frame for each cell</div><div><br></div><div>stroke(50) to make the liner visible but not too contrast</div>"
                    },
                    "style": {}
                  }
                },
                "2": {
                  "title": "fill(deathColor/lifeColor)",
                  "id": 39,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "fill(deathColor) or fill(lifeColor) ??<div><br></div><div>if now == 1, then lifeColor; otherwise, deathColor</div>"
                    },
                    "style": {}
                  }
                },
                "3": {
                  "title": "rect() ",
                  "id": 40,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\">rect(xCell, yCell, wCell, wCell)</span><div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\"><br></span></div><div><span style=\"color: rgb(79, 79, 79); font-family: Helvetica, 'Arial Unicode MS', sans-serif; font-size: 12px; font-weight: bold; line-height: 18px; text-align: center; white-space: pre-wrap; background-color: rgb(224, 224, 224);\"><br></span></div>"
                    },
                    "style": {}
                  }
                }
              },
              "attr": {
                "style": {}
              }
            },
            "2": {
              "title": "randomizeState()",
              "id": 36
            },
            "3": {
              "title": "evolveByRule()",
              "id": 37
            }
          }
        },
        "1.5": {
          "title": "constructor",
          "id": 12,
          "ideas": {
            "1": {
              "title": "Cell(x, y, w)",
              "id": 24,
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "Cell(x, y, w) --<div><br></div><div>1. whenever instantiate a cell object, we give it a specified xCell, yCell and wCell</div><div>2. because, cells are everywhere in canvas, we need specifics to manipulate them</div>"
                },
                "style": {}
              },
              "ideas": {
                "1": {
                  "title": " x, y, w",
                  "id": 26,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "x, y, w --<div><br></div><div>1. differentiate one cell from the other when instantiating cells</div><div><br></div><div>2. values of other fields are shared by all cells at instantiation</div><div><br></div><div>3. other fields may change values of other fields during evolution</div>"
                    },
                    "style": {}
                  }
                },
                "2": {
                  "title": "now",
                  "id": 27,
                  "ideas": {
                    "1": {
                      "title": "int(random(100) < 15",
                      "id": 41
                    }
                  },
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "<div><div>&nbsp; &nbsp;if (int(random(100)) &lt; 15) {</div><div>&nbsp; &nbsp; &nbsp;now = 1;</div><div>&nbsp; &nbsp;} else {</div><div>&nbsp; &nbsp; &nbsp;now = 0;&nbsp;</div><div>&nbsp; &nbsp;}</div></div><div><br></div><div>make sure only 15% change to have an alive cell</div>"
                    },
                    "style": {}
                  }
                },
                "3": {
                  "title": "previous",
                  "id": 28,
                  "ideas": {
                    "1": {
                      "title": "= now;",
                      "id": 30
                    }
                  }
                },
                "1.5": {
                  "title": "lifeColor",
                  "id": 31,
                  "ideas": {
                    "1": {
                      "title": "= color selector value",
                      "id": 32
                    }
                  }
                },
                "1.75": {
                  "title": "deadthColor",
                  "id": 33,
                  "ideas": {
                    "1": {
                      "title": "=color selector value",
                      "id": 34
                    }
                  }
                }
              }
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        }
      }
    }
  },
  "links": []
}